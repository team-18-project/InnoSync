name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/ci-cd ]
  pull_request:
    branches: [ main, feature/ci-cd ]
  workflow_dispatch:

env:
  # Updated Flutter version to one that includes Dart 3.8.1+
  FLUTTER_VERSION: '3.13.0'
  GO_VERSION: '1.21'
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
  POSTGRES_DB: test_db

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: test_db
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            backend/go.sum
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
      - name: Test Backend (Unit)
        working-directory: ./backend
        run: |
          go test -v -coverprofile=unit_coverage.out ./tests/unit/...
          go tool cover -html=unit_coverage.out -o unit_coverage.html
      - name: Test Backend (Integration)
        working-directory: ./backend
        run: |
          go test -v -coverprofile=integration_coverage.out ./tests/integration/...
          go tool cover -html=integration_coverage.out -o integration_coverage.html
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-reports
          path: |
            backend/unit_coverage.html
            backend/integration_coverage.html
  
  notify:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Slack notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: 'CI/CD Pipeline - ${{ job.status }}'
          SLACK_MESSAGE: 'Tests completed for ${{ github.repository }}'
          SLACK_FOOTER: 'View run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
