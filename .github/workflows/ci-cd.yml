name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/ci-cd ]
  pull_request:
    branches: [ main, feature/ci-cd ]
  workflow_dispatch:

env:
  # Using Flutter 3.19.0 which includes Dart 3.3.0
  # OR use Flutter master channel for latest Dart version
  FLUTTER_VERSION: '3.19.0'
  GO_VERSION: '1.21'
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
  POSTGRES_DB: test_db

jobs:
  # ... [keep all your backend job configuration unchanged] ...

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Option 1: Use stable Flutter with compatible Dart version
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      # Option 2: OR use master channel for latest Dart version (uncomment if needed)
      # - name: Set up Flutter
      #   uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: 'master'
      #     channel: 'master'

      - name: Verify Dart version
        run: dart --version

      - name: Update SDK constraints in pubspec.yaml
        working-directory: ./frontend
        run: |
          # Update Dart SDK constraint to match the installed version
          sed -i 's/sdk: \^3\.8\.1/sdk: ">=3.3.0 <4.0.0"/g' pubspec.yaml
          
          # Update integration_test version if needed
          sed -i 's/integration_test: \^1\.2\.0/integration_test: ^2.0.0/g' pubspec.yaml

      - name: Install dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Run Flutter unit tests
        working-directory: ./frontend
        run: |
          flutter test test/unit/
          flutter test --coverage --coverage-path=unit_coverage.info test/unit/
          lcov --remove unit_coverage.info '**/*.g.dart' '**/*.freezed.dart' -o filtered_unit_coverage.info
          genhtml filtered_unit_coverage.info -o unit_coverage_report

      - name: Run Flutter integration tests
        working-directory: ./frontend
        run: |
          flutter test test/integration/
          flutter test --coverage --coverage-path=integration_coverage.info test/integration/
          lcov --remove integration_coverage.info '**/*.g.dart' '**/*.freezed.dart' -o filtered_integration_coverage.info
          genhtml filtered_integration_coverage.info -o integration_coverage_report

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-reports
          path: |
            frontend/unit_coverage_report/**
            frontend/integration_coverage_report/**

  notify:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Slack notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: 'CI/CD Pipeline - ${{ job.status }}'
          SLACK_MESSAGE: 'Tests completed for ${{ github.repository }}'
          SLACK_FOOTER: 'View run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
